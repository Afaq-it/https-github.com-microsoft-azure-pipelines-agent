parameters:
- name: preBuildStages
  type: stageList
  default: []
- name: postBuildStages
  type: stageList
  default: []
- name: componentDetection
  type: boolean
  default: false
- name: test
  type: boolean
  default: true
- name: sign
  type: boolean
  default: false
- name: publishArtifacts
  type: boolean
  default: false
- name: buildAlternatePackage
  type: boolean
  default: true
- name: branch
  type: string
  default: ''

# Targets
- name: win_x64
  type: boolean
  default: true
- name: win_x86
  type: boolean
  default: true
- name: linux_x64
  type: boolean
  default: true
- name: linux_arm
  type: boolean
  default: true
- name: linux_arm64
  type: boolean
  default: true
- name: rhel7_x64
  type: boolean
  default: true
- name: macOS_x64
  type: boolean
  default: true

resources:
  containers:
  - container: dotnetcore_arm
    image: azpagentinfra/arm:latest
  - container: dotnetcore_centos6
    image: azpagentinfra/centos6:latest
  - container: dotnetcore_centos7
    image: azpagentinfra/centos7:latest

stages:

- ${{ parameters.preBuildStages }}

- stage: build
  displayName: Build
  jobs:
  - job: 
      pool:
          name: RMAgentsProdAME

        steps:
          - powershell: |
              Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
              Import-Module AzureRM, AzureRM.profile, AzureRM.Storage, Azure.Storage, AzureRM.Cdn -ErrorAction Ignore -PassThru
              if (!(Test-Path "$HOME\Documents\WindowsPowerShell\profile.ps1"))
              {
                Write-Host "Creating empty PowerShell profile for Enable-AzureRmAlias"
                New-Item -Path "$HOME\Documents\WindowsPowerShell\profile.ps1" -ItemType File -Force | Out-Null
              }
              Enable-AzureRmAlias -Scope CurrentUser
              $uploadFiles = New-Object System.Collections.ArrayList
              $certificateThumbprint = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalCertThumbprint
              $clientId = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalClientId
              Write-Host "##vso[task.setsecret]$certificateThumbprint"
              Write-Host "##vso[task.setsecret]$clientId"
              Login-AzureRmAccount -ServicePrincipal -CertificateThumbprint $certificateThumbprint -ApplicationId $clientId -TenantId $(TenantId)
              Select-AzureRmSubscription -SubscriptionId $(SubscriptionId)
              $storage = Get-AzureRmStorageAccount -ResourceGroupName vstsagentpackage -AccountName vstsagentpackage
              $versionDir = "${{ parameters.version }}"
              Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
                $target=$_
                Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent/$target" -Include "*.zip","*.tar.gz" | ForEach-Object {
                  $executable = $_
                  Write-Host "Uploading $executable to BlobStorage vstsagentpackage/agent/$versionDir"
                  Set-AzureStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$target/$executable" -Blob "$versionDir/$executable" -Force
                  $uploadFiles.Add("/agent/$versionDir/$executable")
                }
              }
              Write-Host "Purge Azure CDN Cache"
              Unpublish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -PurgeContent $uploadFiles
              Write-Host "Force Refresh Azure CDN Cache"
              Publish-AzureRmCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -LoadContent $uploadFiles
            displayName: Upload to Azure Blob


- ${{ parameters.postBuildStages }}