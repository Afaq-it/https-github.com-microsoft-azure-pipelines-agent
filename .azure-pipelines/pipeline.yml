parameters:
- name: preBuildStages
  type: stageList
  default: []
- name: postBuildStages
  type: stageList
  default: []
- name: componentDetection
  type: boolean
  default: false
- name: test
  type: boolean
  default: true
- name: sign
  type: boolean
  default: false
- name: publishArtifacts
  type: boolean
  default: false
- name: buildAlternatePackage
  type: boolean
  default: true
- name: branch
  type: string
  default: ''

# Targets
- name: win_x64
  type: boolean
  default: true
- name: win_x86
  type: boolean
  default: true
- name: linux_x64
  type: boolean
  default: true
- name: linux_arm
  type: boolean
  default: true
- name: linux_arm64
  type: boolean
  default: true
- name: rhel6_x64
  type: boolean
  default: true
- name: macOS_x64
  type: boolean
  default: true

resources:
  containers:
  - container: dotnetcore_arm
    image: azpagentinfra/arm:latest
  - container: dotnetcore_centos6
    image: azpagentinfra/centos6:latest

stages:

- stage: build
  displayName: Build
  jobs:
    - job: publish_agent_packages
      ################################################################################
      displayName: Publish Agents (Windows/Linux/OSX)
      pool:
        name: RMAgentsProdAME
      steps:
        - powershell: |
            Write-Host "Preloading Azure modules." # This is for better performance, to avoid module-autoloading.
            Import-Module Azure, Az.Accounts, Az.Storage, Az.Cdn -ErrorAction Ignore -PassThru
            $uploadFiles = New-Object System.Collections.ArrayList
            $certificateThumbprint = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalCertThumbprint
            $clientId = (Get-ItemProperty -Path "$(ServicePrincipalReg)").ServicePrincipalClientId
            Write-Host "##vso[task.setsecret]$certificateThumbprint"
            Write-Host "##vso[task.setsecret]$clientId"
            Login-AzAccount -ServicePrincipal -CertificateThumbprint $certificateThumbprint -ApplicationId $clientId -TenantId $(TenantId)
            Select-AzSubscription -SubscriptionId $(SubscriptionId)
            $storage = Get-AzStorageAccount -ResourceGroupName vstsagentpackage -AccountName vstsagentpackage
            $versionDir = "2.9999.9999"
            Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent" | ForEach-Object {
              $target=$_
              Get-ChildItem -LiteralPath "$(System.ArtifactsDirectory)/agent/$target" -Include "*.zip","*.tar.gz" | ForEach-Object {
                $executable = $_
                Write-Host "Uploading $executable to BlobStorage vstsagentpackage/agent/$versionDir"
                Set-AzStorageBlobContent -Context $storage.Context -Container agent -File "$(System.ArtifactsDirectory)/agent/$target/$executable" -Blob "$versionDir/$executable" -Force
                $uploadFiles.Add("/agent/$versionDir/$executable")
              }
            }
            Write-Host "Purge Azure CDN Cache"
            Unpublish-AzCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -PurgeContent $uploadFiles
            Write-Host "Force Refresh Azure CDN Cache"
            Publish-AzCdnEndpointContent -EndpointName vstsagentpackage -ProfileName vstsagentpackage -ResourceGroupName vstsagentpackage -LoadContent $uploadFiles
          displayName: Upload to Azure Blob
